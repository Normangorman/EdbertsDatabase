var allPeople = #{jsonPeople};
console.log("All people:", allPeople);

function addPersonToRegister(personObject) {
    var arr_group_pids = readHiddenGroupPids();
    console.log("addPersonToRegister: arr_group_pids:", arr_group_pids);

    //There are now 3 possibilities:
    //1: The person to be added already exists in the group
    //    (the user shouldn't really have pressed the add button again)
    //2: A new person has been created and thus isn't in the global allPeople list.
    //3: An existing person has been added to the group and thus is in allPeople.
    
    //Firstly, add them to allPeople if they're new. (case 2)
    var personIsNew = true;
    for (var i=0; i < allPeople.length; i++) {
        var p = allPeople[i];
        
        if (p.pid === personObject.pid) {
            console.log("addPersonToRegister: confirmed person is not new.");
            personIsNew = false;
        }
    };
    
    if (personIsNew) { allPeople.push( personObject ) }

    //If case 2 or 3 is true:
    //  put the new person's pid in arr_group_pids and make them a register checkbox
    //Note that $.inArray returns -1 if the element is not found in the list
    if ( $.inArray( personObject.pid, arr_group_pids) === -1) {
        console.log("addPersonToRegister: person is not a duplicate so adding them to the hidden form input and making them a register checkbox.");

        arr_group_pids.push( personObject.pid );
        addRegisterCheckbox( personObject );
    }
    
    //concat arr_group_pids and put it back in the hidden form input
    writeHiddenGroupPids( arr_group_pids );
    refreshAddPersonOptions();
};

function batchAddPersonToRegister( arrObjPeople ) {
    //The above function is very inefficient for initially populating the group
    //Here we don't have to do so many safety checks.

    var arr_group_pids = [];
    for (var i=0; i < arrObjPeople.length; i++) {
        var p = arrObjPeople[i];

        arr_group_pids.push( p.pid );
        addRegisterCheckbox( p );
    };

    writeHiddenGroupPids( arr_group_pids );
    refreshAddPersonOptions();
};

function readHiddenGroupPids() {
    //First get all the pids from the hidden form element (which contains the pids of
    //all the people in the group being looked at)
    var hidden_group_pids = $("#hidden_group_pids_input");

    var arr_group_pids =
        hidden_group_pids
            .val()
            .split(',')
            .filter( function(pid) {
                //If the string is parsable as an integer here, it should
                //be on the server as well. This limits the possibility of bugs.
                return parseInt(pid);
            });

    console.log("readHiddenGroupPids: values read:", arr_group_pids);

    return arr_group_pids;
};

function writeHiddenGroupPids( arrPids ) {
    console.log("writeHiddenGroupPids: setting group pids:", arrPids.join() );
    var hidden_group_pids = $("#hidden_group_pids_input");
    hidden_group_pids.val( arrPids.join() );
};

function addRegisterCheckbox ( objPerson ) {
    var htmlString = 
        [
        '<div class="checkbox">',
          '<label>',
            '<input .person_checkbox type="checkbox" name="person_present" value=' + objPerson.pid + '>',
            objPerson.name,
          '</label>',
        '</div>'
        ].join('')

    console.log("Adding checkbox:", htmlString);
    $(htmlString).appendTo("#register_inputs");
};

function refreshAddPersonOptions() {
    //Disable add person to group options for any people who ARE in the group already
    var opts = $("#quick_add_to_group_input option");
  
    var groupPids = readHiddenGroupPids();

    opts.attr("disabled", false) //first enable everything
        .filter(function() {     
                    var strPid  = $(this).val();
                    var inGroup = $.inArray( strPid, groupPids ) != -1;

                    console.log("refreshAddPersonOptions: strPid is in group?", strPid, inGroup);
                    return inGroup;
                })
        .attr("disabled", true) //then disable options for people in the group 
        .trigger("chosen:updated");
};

/////////////
/// INPUT ///
/////////////
$("#register_date_input").change(function() {
    var dateString = $(this).val();
    console.log("Chose date string: " + dateString);

    $("#hidden_register_date_input").val(dateString);
    console.log("Changed hidden form val to: " + $("#hidden_register_date_input").val());
});

$("#confirm_group_choice").click( function() {
    var groupId = $("#group_input").val();
    console.log("Selected group id:", groupId);
    
    var intGroupId = parseInt( groupId );
    //Safety check to prevent parsing bugs on the server
    if (intGroupId === NaN ) { 
        console.log("FATAL ERROR: Couldn't parse groupId as an int.");
    }
    else {
        //set the hidden group_id input. (to a string, not an int)
        $("#hidden_group_id_input").val( groupId );

        //Unhide the container
        $("#register_container")
            .css("visibility", "visible")
            .animate({opacity: 1.0}, 500);

        //Remove all the old checkboxes
        $("#register_inputs").empty();

        var peopleInGroup = allPeople.filter( function(p) {
            return $.inArray(intGroupId, p.gids) != -1;
        });

        batchAddPersonToRegister( peopleInGroup );
    }//end else
});

$("#confirm_add_to_group").click(function() {
    var pid = $("#quick_add_to_group_input").val();
    var gid = $("#hidden_group_id_input").val();  

    console.log("confirm_add_to_group: pid:", pid, " gid:", gid);

    //safety check that both pid and gid are present and parsable:
    if ( parseInt( pid ) && parseInt( gid ) ) {
        $.ajax({
            url: '@{QuickAddPersonToGroupR}',
            type: 'POST',
            data: {
                pid: pid,
                gid: gid
                },
            success: function (personObject) {
                console.log("Added person to group:", personObject);

                addPersonToRegister(personObject);
                //reset the input and update it
                $("#quick_add_to_group_input").val('').trigger("chosen:updated");
            }
        });//end ajax
    }//end if
});

$("#add_new_person").click(function() {
    var firstName = $("#new_person_first_name").val();
    var lastName  = $("#new_person_last_name").val();  
    var gid       = $("#hidden_group_id_input").val();  

    if (firstName != "" && lastName != "" && parseInt( gid ) ) {
        $.ajax({
            url: '@{QuickCreatePersonR}',
            type: 'POST',
            data: {
                first_name: firstName,
                last_name: lastName,
                gid: gid
                },
            success: function (personObject) {
                console.log("Created new person:", personObject);

                addPersonToRegister(personObject);
                //reset the inputs
                $("#new_person_first_name").val('');
                $("#new_person_last_name").val('');
            }
        });//end ajax
    }//end if
});
